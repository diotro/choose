#! /bin/sh -e

# choose: a shell menu
# by Thomas Monjalon

print_help () {
	cat <<- END_OF_HELP
		It returns on stdout the chosen line among the ones submitted via stdin.
		Apart result, all is printed on stderr.

	END_OF_HELP
	print_usage
}

print_usage () {
	cat <<- END_OF_USAGE
		usages:
		         $B$SELF$S [${U}options$S] <default_choice> <choice_1> [choice_2] ...
		         $B$SELF$S [${U}options$S] [default_choice] < file_of_choices
		         command_which_print_choices | $B$SELF$S [${U}options$S] [default_choice]
		options:
		         ${B}-c$S   cursor mode (default)
		         ${B}-n$S   numerated mode
		         ${B}-r$S   reversed style (default)
		         ${B}-a$S   arrow style
		         ${B}-q$S   quiet = clean all on exit
		         ${B}-v$S   verbose = keep menu on exit
		         ${B}-h$S   help
	END_OF_USAGE
}

alert () { # <comment>
	echo $SELF: "$@"
	exit 1
}

set_defaults () {
	unset LINES
	unset DEFAULT
	MODE=cursor
	STYLE=reversed
	CLEAN=keepchoice
	N=0
	INDENT=${INDENT:-'    '}
	ARROW=${ARROW:-'=>'}
	unset TTY_SAVE
	LIST_DONE=false
}

handle_args () { # <arguments>
	local ARG
	SELF=$(basename $0)
	while getopts cnraqvh ARG ; do
		case $ARG in
			c ) MODE=cursor ;;
			n ) MODE=numerated ;;
			r ) STYLE=reversed ;;
			a ) STYLE=arrow ;;
			q ) CLEAN=all ;;
			v ) CLEAN=none ;;
			h ) print_help ; exit 0 ;;
		esac
	done
	shift $((OPTIND - 1))
	if has_batch_input ; then # choices from standard input
		DEFAULT=$*
	else # default is followed by choices as arguments
		DEFAULT=$1
		for ARG in $(seq $(($# - 1))) ; do
			shift
			LINES=$(printf -- "$LINES\n$1" | grep -v '^$')
		done
	fi
}

check_input () {
	if ! has_batch_input ; then
		print_usage
		alert 'no input'
	fi
}

has_batch_input () {
	test ! -t 0
}

is_redirected () {
	test ! -t 2
}

isdigit () { # <string>
	test $# -eq 1
	case $1 in
		*[!0-9]* | '') false ;;
	esac
}

code2hex () { # < bytes
	od -t x1 | head -n1 | cut -d' ' -f2- | tr -d ' '
}

get_key_codes () {
	# ENTER
	TTY_ENT=$(echo | code2hex)
	TTY_KENT=$(tput kent | code2hex)
	# UP
	TTY_CUU1=$(tput cuu1 | code2hex)
	TTY_KCUU1=$(tput kcuu1 | code2hex)
	# DOWN
	TTY_CUD1=$(tput cud1 | code2hex)
	TTY_KCUD1=$(tput kcud1 | code2hex)
	# some terminals send the wrong code for certain arrow keys
	if [ "$TTY_CUU1" = 1b5b41 -o "$TTY_KCUU1" = 1b5b41 ] ; then
		TTY_CUDX=1b5b42
	fi
}

configure_tty () {
	TTY_SAVE=$(stty -g)
	stty cs8 -icanon -echo # get key codes without echoing
	tput civis # hide cursor
}

restore_tty () {
	test -z "$TTY_SAVE" || stty $TTY_SAVE >&- 2>&-
	tput cnorm # show cursor
}

get_width () {
	WIDTH=$(stty size | cut -d' ' -f2)
}

set_fancy_output () {
	if is_redirected ; then
		unset S B U R
	else
		S=$(printf '\033[0m') # standard
		B=$(printf '\033[1m') # bold
		U=$(printf '\033[4m') # underlined
		R=$(printf '\033[7m') # reversed
	fi
}

term_pos_save () {
	printf '\033[s'
}

term_pos_restore () {
	printf '\033[u'
}

term_pos_up () { # [lines count]
	printf "\033[$1A" # go up (default to 1 line)
}

term_pos_down () { # [lines count]
	printf "\033[$1B" # go down (default to 1 line)
}

term_pos_home () {
	printf "\033[${WIDTH}D" # go to beginning of line
}

term_clear_bottom () {
	printf '\033[J' # clear lines from current position
}

cursor_begin () {
	term_pos_save
	term_pos_up $((COUNT - N + 1)) # go up to current line
}

cursor_end () {
	term_pos_restore
}

cursor_erase () {
	cursor_begin
	if [ $STYLE = arrow ] ; then
		printf -- $ARROW | sed 's,., ,g'
	else
		printf -- "$(print_current_line | format_simple)"
	fi
	term_pos_home
}

cursor_draw () {
	if [ $STYLE = arrow ] ; then
		printf -- $ARROW
	else
		printf -- "$(print_current_line | format_cursor)"
	fi
	cursor_end
}

cursor_init () {
	cursor_begin
	cursor_draw
}

cursor_up () {
	if [ $N -gt 1 ] ; then
		cursor_erase
		term_pos_up
		N=$((N - 1))
		cursor_draw
	fi
}

cursor_down () {
	if [ $N -lt $COUNT ] ; then
		cursor_erase
		term_pos_down
		N=$((N + 1))
		cursor_draw
	fi
}

clean_menu () {
	term_pos_up $CLEAN_COUNT # go to first line
	term_pos_home
	term_clear_bottom
	[ $CLEAN = all ] || print_current_line | format_$MODE
}

truncate () { # <width>
	while read LINE ; do
		# fold count the tab space unlike cut
		printf -- "$LINE\n" | fold -w$1 | head -n1
	done
}

format_simple () { # < lines in cursor mode
	truncate $((WIDTH - ${#INDENT})) | sed "s,^,$INDENT,"
}

format_arrow () { # < lines in cursor mode
	format_simple | sed "s,^.\{${#ARROW}\},$ARROW,"
}

format_reversed () { # < lines in cursor mode
	truncate $((WIDTH - ${#INDENT})) | sed "s,\(.*\),$INDENT$R\1$S,"
}

format_cursor () { # < lines in cursor mode
	format_$STYLE
}

format_numerated () { # < lines in numerated mode
	DEFAULT=$(print_current_line)
	# replace index number by spaces
	INDENT=$(printf '+:' | cat -n | cut -d: -f1 | sed 's,., ,g')
	sed "s,^,$INDENT," | filter_default
}

regescape () { # <string>
	printf -- "$@" | sed 's,\([[\/.*]\|\]\),\\&,g'
}

filter_default () { # < lines in numerated mode
	if [ -n "$DEFAULT" ] ; then
		if [ $STYLE = arrow ] ; then
			sed "s/^.\{${#ARROW}\}\( *[0-9]*[	 ]*$(regescape $DEFAULT)\)$/$ARROW\1/"
		else
			sed "s/^\( *[0-9]*[	 ]*\)\($(regescape $DEFAULT)\)$/\1$R\2$S/"
		fi
	else
		cat
	fi
}

get_default_index () {
	if [ -n "$DEFAULT" ] ; then
		printf -- "$LINES" | sed -n "/^$(regescape $DEFAULT)$/=" | head -n1
	fi
}

print_current_line () {
	printf -- "$LINES\n" | sed -n ${N}p
}

numerated_list () {
	printf -- "$LINES\n" | cat -n | filter_default
	[ $CLEAN = none ] || get_width
	CLEAN_COUNT=$(printf -- "$LINES\n" | cat -n | fold -w$WIDTH | wc -l)
}

cursor_list () {
	CLEAN_COUNT=$COUNT
	configure_tty
	get_width
	printf -- "$LINES\n" | format_simple
	N=$(get_default_index)
	isdigit "$N" || N=1 # fallback to first choice
	cursor_init
}

numerated_choice () { # < user input
	while : ; do
		printf "> "
		read N
		CLEAN_COUNT=$((CLEAN_COUNT + 1))
		test -n "$N" || N=$(get_default_index) # ENTER = default choice
		isdigit "$N" || N=0 # fallback to invalid choice
		[ $N -lt 1 -o $COUNT -lt $N ] || break
	done
}

cursor_choice () { # < user input
	get_key_codes
	local KEY
	while : ; do
		KEY=$(dd bs=4 count=1 2>&- | code2hex)
		get_width # update width in case of resizing
		case $KEY in
			"$TTY_ENT"  | "$TTY_KENT"                ) break ;;
			"$TTY_CUU1" | "$TTY_KCUU1"               ) cursor_up ;;
			"$TTY_CUD1" | "$TTY_KCUD1" | "$TTY_CUDX" ) cursor_down ;;
		esac
	done
}

clean () { # [override clean mode]
	[ $CLEAN = none ] || ! $LIST_DONE || CLEAN=${1:-$CLEAN} clean_menu
	restore_tty
}

set_exit_handler () {
	trap "clean all ; exit 2" INT QUIT TERM
}

{ # main
	set_defaults
	set_fancy_output
	handle_args "$@"
	if [ -z "$LINES" ] ; then
		check_input
		LINES=$(grep -v '^$') # get standard input without blank lines
	fi
	COUNT=$(printf -- "$LINES\n" | wc -l)
	set_exit_handler
	{
		${MODE}_list
		LIST_DONE=true
		if [ $COUNT -le 1 ] ; then
			N=1 # no choice
		else
			${MODE}_choice
		fi
		clean
	} </proc/$PPID/fd/0 # get terminal input
} >&2
print_current_line # return chosen line on standard output
